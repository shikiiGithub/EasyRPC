/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.JavaHost;

import com.JavaHost.Helpers.AAServer;
import com.JavaHost.Helpers.LogItemInfo;
import com.JavaHost.Helpers.NQuartz;
import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONObject;
import System.*;
import System.IO.*;
import System.Networking.Services.CTCMessage;
import System.Networking.Services.ServiceHost;
import System.Text.Encoding;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

public class App {

    public static final String ThisServiceName = "JavaHost";
    ServiceHost thisHost;
    public static NQuartz ThisNQuartz;
    public static AAServer ThisAAServer;
    public static final String LogTowerService = "LogTower";
    public boolean logTowerServiceEnabled = false;
    public static App thisApp;
    public final int connectedTimeout = 10 * 1000;

    public static ConcurrentLinkedQueue<LogItemInfo> LogQueue = new ConcurrentLinkedQueue<LogItemInfo>();

    public static void main(String[] args) {

        thisApp = new App();
        thisApp.Init();
    }

    private void Init() {
        String configContent = null;
        String configFilePath = "bootableAssemblyList.json";
        System.out.println("i didn't find your bootableAssemblyList.json !" );
        if (File.Exists(configFilePath)) {
            configContent = File.ReadAllText("bootableAssemblyList.json", Encoding.UTF8());
            JSONObject data = JSON.parseObject(configContent);
            JSONObject serviceCenterConfig = data.getJSONObject("serviceCenter");
            String ip = serviceCenterConfig.getString("ip");
            int port = serviceCenterConfig.getInteger("port");
            int bufferSize = serviceCenterConfig.getInteger("bufferSize");
            thisHost.BufferSize = bufferSize;
            thisHost = new ServiceHost(ip, port);
        }
        else
            thisHost = new ServiceHost("127.0.0.1", 8040);

        thisHost.ServiceName = ThisServiceName;
        boolean isConnected = thisHost.Connect(connectedTimeout);
        LoopConnect();
    }


    public void LoopConnect() {
        if (thisHost.bIsConnected) {
            Ready();
            thisHost.Register(ThisServiceName);
            NQuartz.thisHost = thisHost;

            //注册你要监视的服务
            thisHost.RegisterSpyingService(LogTowerService);
            thisHost.OnSpyingServiceChanged = (data) -> {
                Object obj = data.get(LogTowerService);
                this.logTowerServiceEnabled = (boolean) obj;
                new Thread(() -> {
                    LogMany();
                }).start();

                return true;
            };
            LogInfo(ThisServiceName + "  service has connected !");


        } else {
            try {
                Thread.sleep(1000);
                thisHost.Reconnect(connectedTimeout);
                LoopConnect();
            } catch (Exception e) {
                System.out.println("at LoopConnect:" + e.getMessage());
            }


        }
    }

    //这里初始化 !!! 清在  if (App.ThisNQuartz == null) 判断里写以避免某些方法执行多次初始化
    void Ready() {

        if (App.ThisNQuartz == null) {
            try {
                App.ThisNQuartz = (NQuartz) this.thisHost.PrepareInstance("com.JavaHost.Helpers.NQuartz", "NewTimer");
                App.ThisAAServer = (AAServer) this.thisHost.PrepareInstance("com.JavaHost.Helpers.AAServer", "NewTimer");
            } catch (Exception e) {
                e.printStackTrace();
            }


        }

    }


    public static LogItemInfo GetLogItemInfo(String level, String content) {
        LogItemInfo _info = new LogItemInfo();
        _info.ServiceName = ThisServiceName;
        _info.Content = content;
        _info.FireDate = DateTime.Now().ToDate();
        _info.FireTime = DateTime.Now().ToLongTimeString();
        _info.Level = level;
        return _info;
    }

    public static CTCMessage GetCTCMessage(String asmName, String className, String mtdName, String... params) {
        CTCMessage message = new CTCMessage();
        message.Params = params;
        message.MethodName = mtdName;
        message.ClassName = className;
        message.AssemblyName = asmName;
        return message;
    }

    public static String GetExceptionString(Exception e) {
        e.printStackTrace();
        String errorMsg = String.format("error:%s %s ", e.getMessage(), e.getStackTrace());
        return errorMsg;
    }


    static void LogMany() {
        if (LogQueue.size() > 0) {
            List<LogItemInfo> logs = new ArrayList<>();
            for (int i = 0; i < LogQueue.size(); i++) {
                LogItemInfo _info = LogQueue.poll();
                logs.add(_info);
            }
            String infos = JSON.toJSONString(logs);
            CTCMessage message = GetCTCMessage(LogTowerService, "App", "LogMany", infos);
            message = NQuartz.thisHost.CallService(LogTowerService, message, thisApp.connectedTimeout, 100);
            if (message.ErrorMsg != null && !message.ErrorMsg.equals(""))
                System.out.println(message.ErrorMsg);
            if (message.ReturnedData != null)
                System.out.println(message.ReturnedData);
        }

    }

    public static void LogInfo(String info) {
        System.out.println(info);
        LogItemInfo _info = GetLogItemInfo("INFO", info);
        LogQueue.add(_info);
        if (thisApp.logTowerServiceEnabled) {
            LogMany();
        }
    }

    public static void LogError(String errorText) {
        System.out.println(errorText);

        LogItemInfo _info = GetLogItemInfo("ERROR", errorText);
        LogQueue.add(_info);
        if (thisApp.logTowerServiceEnabled) {
            LogMany();
        }


    }

    public static void LogError(Exception error) {
        String errorText = GetExceptionString(error);
        LogError(errorText);
    }

}